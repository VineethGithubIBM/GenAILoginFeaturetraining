package gov.scot.steps.spm.common;

import gov.scot.pages.spm.common.HomePage;
import gov.scot.pages.spm.common.SPMBasePage;
import gov.scot.pages.spm.common.clientoutcome.registration.CuramRegisterProspectPersonPage;
import gov.scot.pages.spm.common.clientoutcome.searches.CuramSearchPersonPage;
import gov.scot.pages.spm.common.person.CuramPersonHomePage;
import gov.scot.pages.spm.crossCutting.application.CuramApplicationChallengePage;
import gov.scot.utilities.common.utilityHelpers.DateHelper;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

import java.util.List;
import java.util.Map;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;

public class HomePageSteps extends SPMBasePage {

    HomePage hmePage;
    CuramSearchPersonPage searchPersonPage;
    CuramRegisterProspectPersonPage prospectPersonPage;
    CuramPersonHomePage personHomePage;
    CuramApplicationChallengePage CuramApplicationChallengePage;

//Login with different users
//And I am on the Home page of the IBM SPM
    @Given("^I am on the Home page of the IBM SPM$")
    public void i_am_on_the_home_page_of_the_ibm_spm() throws Throwable {
        hmePage.switchToDefaultFrame();
        waitForPageLoading();
    }

    @When("^I search for pcc case and open from homepage$")
    public void i_search_for_pcc_case_and_open() throws Throwable {
        hmePage.closeAllOpenTabs();
        CuramApplicationChallengePage.fillApplicationNumber(sharedData.pccCaseNumber);

    }

    @When("^I click on the register a prospect person link$")
    public void i_click_on_the_register_a_prospect_person_link() throws Throwable {
        hmePage.clickClientAndOutcomes();
        hmePage.clickHomePageMenu();

        hmePage.clickRegistrationLink();
        hmePage.clickRegisterProspectPersonLink();
        //clickRegisterProspectPersonLink
    }

    @Then("^I should navigate to the prospect registration page$")
    public void i_should_navigate_to_the_prospect_registration_page() throws Throwable {
        prospectPersonPage.switchToRegisterProspectPersonFrame();
        clickNextButton();

    }

    @Then("^I should navigate back to the prospect registration page$")
    public void i_should_navigate_back_to_the_prospect_registration_page() {
        prospectPersonPage.switchToRegisterProspectPersonFrame();
        //prospectPersonPage.clickNext();
    }

    @When("^I click on \"([^\"]*)\" under \"([^\"]*)\" in Shortcuts$")
    public void i_click_on_sub_menu_under_main_menu_link(String subMenu, String mainMenu) {
        hmePage.clickOnAdminWorkSpace();
        hmePage.closeAllOpenTabs();
        hmePage.clickHomePageMenu();
        hmePage.clickMenuLink(mainMenu, subMenu);
    }

    @Then("spm is checked that it is not timetravelled")
    public void spmIsCheckedThatItIsNotTimetravelled() throws Exception {

        String spmCurrentDate = hmePage.getCurrentDateFromSPM();
        String actualCurrentDate = DateHelper.getCurrentDateInSPMformat();

        logger.info("SPM Date - " + spmCurrentDate + " Actual date - " + actualCurrentDate);
        assertThat(spmCurrentDate, containsString(actualCurrentDate));
    }

    @Then("^I switch to \"([^\"]*)\" tab$")
    public void iSwitchToNamedTab(String tabName) {
        switchToTab(tabName);
    }

    @Then("I update properties in SPM")
    public void iUpdatePropertiesInSPM(List<Map<String, String>> properties) {
        hmePage.setSPMProperties(properties);
    }

    @Then("I search for and verify the following details in the property")
    public void iSearchForAndVerifyTheFollowingDetailsInTheProperty(List<Map<String , String>> details) {
        hmePage.verifyPropertyDetails(details);
    }
}
