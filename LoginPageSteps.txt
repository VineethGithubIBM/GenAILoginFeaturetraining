package gov.scot.steps.spm.common;

import gov.scot.pages.spm.common.LoginPage;
import gov.scot.pages.spm.common.SPMBasePage;
import gov.scot.utilities.common.Constants;
import gov.scot.utilities.common.DBUtil;
import gov.scot.utilities.common.UserInterrupt;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;

public class LoginPageSteps extends SPMBasePage {

    public LoginPage loginPage;
    public UserInterrupt userInterrupt;

    @Given("^I ask for user input$")
    public void i_ask_for_user_input() throws Exception {
        //todo: add logic so that it is called only when run from local
        // maybe tag based, not call when from jenkins
        sharedData.ADpassword = userInterrupt.askForUserADPassword(getDriver());
    }

    //Given I login to spm as <users>
   //Login with different users
    @Given("^I login to spm as \"([^\"]*)\"$")
    public void i_login_to_spm(String username) throws Exception {
        navigateToSPMUrl();
        waitForPageLoading();
        switch (username) {
            case "bsgcaseworker1":
                sharedData.username = Constants.bsgcaseworker1;
                loginPage.setSpmLoginUsername(Constants.bsgcaseworker1);
                break;
            case "bsgcaseworker2":
                sharedData.username = Constants.bsgcaseworker2;
                loginPage.setSpmLoginUsername(Constants.bsgcaseworker2);
                break;
            case "bsgcaseworker3":
                sharedData.username = Constants.bsgcaseworker3;
                loginPage.setSpmLoginUsername(Constants.bsgcaseworker3);
                break;
            case "bsgsupervisor":
                sharedData.username = Constants.bsgsupervisor;
                loginPage.setSpmLoginUsername(Constants.bsgsupervisor);
                break;
            case "bsgsupervisor1":
            case "Release Supervisor":
                sharedData.username = Constants.bsgsupervisor1;
                loginPage.setSpmLoginUsername(Constants.bsgsupervisor1);
                break;
            case "casclientadvisor":
                sharedData.username = Constants.casclientadvisor;
                loginPage.setSpmLoginUsername(Constants.casclientadvisor);
                break;
            case "casteammanager":
                sharedData.username = Constants.casteammanager;
                loginPage.setSpmLoginUsername(Constants.casteammanager);
                break;
            case "clientexperienceadvisor":
                sharedData.username = Constants.clientexperienceadvisor;
                loginPage.setSpmLoginUsername(Constants.clientexperienceadvisor);
                break;
            case "clientexperienceofficer":
                sharedData.username = Constants.clientexperienceofficer;
                loginPage.setSpmLoginUsername(Constants.clientexperienceofficer);
                break;
            case "admin":
                sharedData.username = "admin";
                loginPage.setSpmLoginUsername("admin");
                break;
            case "sysadmin":
                sharedData.username = "sysadmin";
                loginPage.setSpmLoginUsername("sysadmin");
                break;
            case "feacaseworker1":
                sharedData.username = Constants.feacaseworker1;
                loginPage.setSpmLoginUsername(Constants.feacaseworker1);
                break;
            case "feacaseworker2":
                sharedData.username = Constants.feacaseworker2;
                loginPage.setSpmLoginUsername(Constants.feacaseworker2);
                break;
            case "fspcaseworker3":
                sharedData.username = Constants.fspcaseworker3;
                loginPage.setSpmLoginUsername(Constants.fspcaseworker3);
                break;
            case "fspcaseadvisor":
                sharedData.username = Constants.fspcaseadvisor;
                loginPage.setSpmLoginUsername(Constants.fspcaseadvisor);
                break;
            case "ycgcaseworker1":
                sharedData.username = Constants.ycgcaseworker1;
                loginPage.setSpmLoginUsername(Constants.ycgcaseworker1);
                break;
            case "ycgcaseworker2":
                sharedData.username = Constants.ycgcaseworker2;
                loginPage.setSpmLoginUsername(Constants.ycgcaseworker2);
                break;
            case "feateammanager1":
                sharedData.username = Constants.feateammanager1;
                loginPage.setSpmLoginUsername(Constants.feateammanager1);
                break;
            case "feateammanager2":
                sharedData.username = Constants.feateammanager2;
                loginPage.setSpmLoginUsername(Constants.feateammanager2);
                break;
            case "fspteammanager3":
                sharedData.username = Constants.fspteammanager3;
                loginPage.setSpmLoginUsername(Constants.fspteammanager3);
                break;
            case "jspcaseworker1":
                sharedData.username = Constants.jspcaseworker1;
                loginPage.setSpmLoginUsername(Constants.jspcaseworker1);
                break;
            case "jspmanager1":
                sharedData.username = Constants.jspmanager1;
                loginPage.setSpmLoginUsername(Constants.jspmanager1);
                break;
            case "libfinanceadvisor":
                sharedData.username = Constants.libfinanceadvisor;
                loginPage.setSpmLoginUsername(Constants.libfinanceadvisor);
                break;
            case "libfinancesupervisor":
                sharedData.username = Constants.libfinancesupervisor;
                loginPage.setSpmLoginUsername(Constants.libfinancesupervisor);
                break;
            case "localDeliveryAdvisor":
                sharedData.username = Constants.localDeliveryAdvisor;
                loginPage.setSpmLoginUsername(Constants.localDeliveryAdvisor);
                break;
            case "localDeliverySupervisor":
                sharedData.username = Constants.localDeliverySupervisor;
                loginPage.setSpmLoginUsername(Constants.localDeliverySupervisor);
                break;
            case "mappaAdvisor":
                sharedData.username = Constants.mappaAdvisor;
                loginPage.setSpmLoginUsername(Constants.mappaAdvisor);
                break;
            case "mappaSupervisor":
                sharedData.username = Constants.mappaSupervisor;
                loginPage.setSpmLoginUsername(Constants.mappaSupervisor);
                break;
            case "unacceptableActionAdvisor":
                sharedData.username = Constants.unacceptableActionAdvisor;
                loginPage.setSpmLoginUsername(Constants.unacceptableActionAdvisor);
                break;
            case "unacceptableActionSupervisor":
                sharedData.username = Constants.unacceptableActionSupervisor;
                loginPage.setSpmLoginUsername(Constants.unacceptableActionSupervisor);
                break;
            case "cdpcaseworker":
                sharedData.username = Constants.cdpcaseworker;
                loginPage.setSpmLoginUsername(Constants.cdpcaseworker);
                break;
            case "challengeCEAdvisor":
                sharedData.username = Constants.challengeCEAdvisor ;
                loginPage.setSpmLoginUsername(Constants.challengeCEAdvisor);
                break;
            case "challengecaseofficer":
                sharedData.username = Constants.challengecaseofficer;
                loginPage.setSpmLoginUsername(Constants.challengecaseofficer);
                break;
            case "cdpsupervisor":
                sharedData.username = Constants.cdpsupervisor;
                loginPage.setSpmLoginUsername(Constants.cdpsupervisor);
                break;
            case "adpcaseworker2":
                sharedData.username = Constants.adpcaseworker2;
                loginPage.setSpmLoginUsername(Constants.adpcaseworker2);
                break;
            case "adpsupervisor2":
                sharedData.username = Constants.adpsupervisor2;
                loginPage.setSpmLoginUsername(Constants.adpsupervisor2);
                break;

            /// TEST RUN New User for SI


            case "PTATSI2Casewoker":
                sharedData.username = Constants.PTATSI2Casewoker;
                loginPage.setSpmLoginUsername(Constants.PTATSI2Casewoker);
                break;
            case "PTATSISupervisor2":
                sharedData.username = Constants.PTATSISupervisor2;
                loginPage.setSpmLoginUsername(Constants.PTATSISupervisor2);
                break;



            case "cdpcaseworker1":
                sharedData.username = Constants.cdpcaseworker1;
                loginPage.setSpmLoginUsername(Constants.cdpcaseworker1);
                break;
            case "cdpcaseworker2":
                sharedData.username = Constants.cdpcaseworker2;
                loginPage.setSpmLoginUsername(Constants.cdpcaseworker2);
                break;
            case "cdpcaseworker3":
                sharedData.username = Constants.cdpcaseworker3;
                loginPage.setSpmLoginUsername(Constants.cdpcaseworker3);
                break;
            case "cdpcaseworker4":
                sharedData.username = Constants.cdpcaseworker4;
                loginPage.setSpmLoginUsername(Constants.cdpcaseworker4);
                break;
            case "cdpcaseworker5":
                sharedData.username = Constants.cdpcaseworker5;
                loginPage.setSpmLoginUsername(Constants.cdpcaseworker5);
                break;
            case "cdpsupervisor1":
                sharedData.username = Constants.cdpsupervisor1;
                loginPage.setSpmLoginUsername(Constants.cdpsupervisor1);
                break;
            case "cdpsupervisor2":
                sharedData.username = Constants.cdpsupervisor2;
                loginPage.setSpmLoginUsername(Constants.cdpsupervisor2);
                break;
            case "cdpsupervisor3":
                sharedData.username = Constants.cdpsupervisor3;
                loginPage.setSpmLoginUsername(Constants.cdpsupervisor3);
                break;
            case "cdpsupervisor5":
                sharedData.username = Constants.cdpsupervisor5;
                loginPage.setSpmLoginUsername(Constants.cdpsupervisor5);
                break;
            case "scanningmanager":
                sharedData.username = Constants.scanningmanager;
                loginPage.setSpmLoginUsername(Constants.scanningmanager);
                break;
            case "cwhasupervisor":
                sharedData.username = Constants.cwhasupervisor;
                loginPage.setSpmLoginUsername(Constants.cwhasupervisor);
                break;
            case "cdpScanningManager":
                sharedData.username = Constants.cdpScanningManager;
                loginPage.setSpmLoginUsername(Constants.cdpScanningManager);
                break;
            case "cwhaclientxxpirenceofficer":
                sharedData.username = Constants.cwhaclientxxpirenceofficer;
                loginPage.setSpmLoginUsername(Constants.cwhaclientxxpirenceofficer);
                break;
            case "cwhacaseworker":
                sharedData.username = Constants.cwhacaseworker;
                loginPage.setSpmLoginUsername(Constants.cwhacaseworker);
                break;
            case "debtadvisor":
                sharedData.username = Constants.debtadvisor;
                loginPage.setSpmLoginUsername(Constants.debtadvisor);
                break;
            case "debtsupervisor":
                sharedData.username = Constants.debtsupervisor;
                loginPage.setSpmLoginUsername(Constants.debtsupervisor);
                break;
            case "cwhasupervisor1":
                sharedData.username = Constants.cwhasupervisor1;
                loginPage.setSpmLoginUsername(Constants.cwhasupervisor1);
                break;
            case "cwhacaseworker1":
                sharedData.username = Constants.cwhacaseworker1;
                loginPage.setSpmLoginUsername(Constants.cwhacaseworker1);
                break;
            case "casetransfercaseworker1":
                sharedData.username = Constants.casetransferworker1;
                loginPage.setSpmLoginUsername(Constants.casetransferworker1);
                break;
            case "cdpReleaseSupervisor":
                sharedData.username = Constants.cdpReleaseSupervisor;
                loginPage.setSpmLoginUsername(Constants.cdpReleaseSupervisor);
                break;
            case "cdpReleaseCaseworker":
                sharedData.username = Constants.cdpReleaseCaseworker;
                loginPage.setSpmLoginUsername(Constants.cdpReleaseCaseworker);
                break;
            case "Auto.Superuser":
                sharedData.username = Constants.releaseSuperuser;
                loginPage.setSpmLoginUsername(Constants.releaseSuperuser);
                break;
            case "releaseFinanceCaseworker":
                sharedData.username = Constants.releaseFinanceCaseworker;
                loginPage.setSpmLoginUsername(Constants.releaseFinanceCaseworker);
                break;
            case "adpcaseworker1":
                sharedData.username = Constants.adpcaseworker1;
                loginPage.setSpmLoginUsername(Constants.adpcaseworker1);
                break;
            case "adpsupervisor":
                sharedData.username = Constants.adpsupervisor;
                loginPage.setSpmLoginUsername(Constants.adpsupervisor);
                break;
            case "cearedeterminationappeal":
                sharedData.username = Constants.cearedeterminationappeal;
                loginPage.setSpmLoginUsername(Constants.cearedeterminationappeal);
                break;
            case "ceoredeterminationappeal":
                sharedData.username = Constants.ceoredeterminationappeal;
                loginPage.setSpmLoginUsername(Constants.ceoredeterminationappeal);
                break;
            case "scpcaseworker1":
                sharedData.username = Constants.scpcaseworker1;
                loginPage.setSpmLoginUsername(Constants.scpcaseworker1);
                break;
            case "consultationsIntegrationManager":
                sharedData.username = Constants.consultationsIntegrationManager;
                loginPage.setSpmLoginUsername(Constants.consultationsIntegrationManager);
                break;
            case "CDPCaseworkerDSP":
                sharedData.username = Constants.CDPCaseworkerDSP;
                loginPage.setSpmLoginUsername(Constants.CDPCaseworkerDSP);
                break;
            case "ADPCaseworkerDSP":
                sharedData.username = Constants.ADPCaseworkerDSP;
                loginPage.setSpmLoginUsername(Constants.ADPCaseworkerDSP);
                break;
            case "cspcaseworker1":
                sharedData.username = Constants.cspcaseworker1;
                loginPage.setSpmLoginUsername(Constants.cspcaseworker1);
                break;
            case "cspsupervisor1":
                sharedData.username = Constants.cspsupervisor1;
                loginPage.setSpmLoginUsername(Constants.cspsupervisor1);
                break;
            case "cspsuper":
                sharedData.username = Constants.cspsuper;
                loginPage.setSpmLoginUsername(Constants.cspsuper);
                break;
            case "financeSupervisor":
                sharedData.username = Constants.financeSupervisor;
                loginPage.setSpmLoginUsername(Constants.financeSupervisor);
                break;
            case "sgdisadvisor":
                sharedData.username = Constants.sgdisadvisor;
                loginPage.setSpmLoginUsername(Constants.sgdisadvisor);
                break;
            case "whpcaseworker":
                sharedData.username = Constants.whpcaseworker;
                loginPage.setSpmLoginUsername(Constants.whpcaseworker);
                break;
            case "whpsupervisor":
                sharedData.username = Constants.whpsupervisor;
                loginPage.setSpmLoginUsername(Constants.whpsupervisor);
                break;
            case "whpsupervisor1":
                sharedData.username = Constants.whpsupervisor1;
                loginPage.setSpmLoginUsername(Constants.whpsupervisor1);
                break;
            case "cspcaseworker":
                sharedData.username = Constants.cspcaseworker;
                loginPage.setSpmLoginUsername(Constants.cspcaseworker);
                break;
            case "disabilitycaseworker":
                sharedData.username = Constants.DSP_SI_SPM_CASEWORKER;
                loginPage.setSpmLoginUsername(Constants.DSP_SI_SPM_CASEWORKER);
                break;
            case "disabilitysupervisor":
                sharedData.username = Constants.DSP_SI_SPM_SUPERVISOR;
                loginPage.setSpmLoginUsername(Constants.DSP_SI_SPM_SUPERVISOR);
                break;
            default:
                sharedData.username = "srobertson";
                loginPage.setSpmLoginUsername("srobertson");
                break;
            case "cdpsuperuser":
                sharedData.username = Constants.cdpsuperuser;
                loginPage.setSpmLoginUsername(Constants.cdpsuperuser);
                break;
            case "cspadvisor":
                sharedData.username = "cspadvisor";
                loginPage.setSpmLoginUsername("cspadvisor");
                break;
        }

        // only for demodata, admin and sysadmin, password is password
        if (sharedData.username.equals("admin") || sharedData.username.equals("sysadmin") ||
                sharedData.username.equals("pjohnson") || sharedData.username.equals("srobertson") || sharedData.username.equals("cspsuper") || sharedData.username.equals("cspadvisor")) {
            loginPage.manageLogin(sharedData.username, "password");
            return;
        } else if (sharedData.username.equals("jsmith") || sharedData.username.equals("mclark") || sharedData.username.equals("bconnelly") || sharedData.username.equals("cmacleod") || sharedData.username.equals("ceofficer")) {

            loginPage.setSpmLoginPassword("password");

        } else if (sharedData.username.equals("owilde") || sharedData.username.equals("ejohns") ||
                sharedData.username.equals("jsmith") || sharedData.username.equals("mclark") ||
                sharedData.username.equals("bconnelly") || sharedData.username.equals("cmacleod") ||
                sharedData.username.equals("ceofficer") ) {

            loginPage.setSpmLoginPassword("password");
        } else if (sharedData.username.equals("mclark1")) {
            loginPage.setSpmLoginPassword("Password123!");
        } else {
            loginPage.setSpmLoginPassword(Constants.password);
        }
        loginPage.setSpmLoginSubmit();
    }

    @And("^I wait for application to be up$")
    public void wait_for_application_to_be_up() throws Exception {
        navigateToSPMUrl();
        loginPage.waitForApplicationToBeUp();

    }

    @Given("^Create all SPM Users$")
    public void creatallSPMUsers() throws Exception {
        loginPage.createSPMUsers();
    }

    @When("^I refresh database$")
    public void irefreshdatabase() throws Exception {
        DBUtil.getInstance().RefreshDB();
    }

}
