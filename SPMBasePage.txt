package gov.scot.pages.spm.common;

import gov.scot.utilities.common.BasePageObject;
import gov.scot.utilities.common.utilityHelpers.DateHelper;
import net.serenitybdd.core.Serenity;
import net.serenitybdd.core.pages.WebElementFacade;
import org.assertj.core.api.Assertions;
import org.jetbrains.annotations.NotNull;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.yaml.snakeyaml.Yaml;
import org.openqa.selenium.support.ui.ExpectedConditions;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.ParseException;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Supplier;

import static gov.scot.pages.spm.common.SPM.CaseType;
import static gov.scot.utilities.common.utilityHelpers.DataHelper.notEmptyOrNull;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class SPMBasePage extends BasePageObject {

    public By SearchPersonFrame = By.cssSelector("iframe[title='Content Panel - Person Search'][src*='Person_search']");
    @FindBy(xpath = "//a[@title='Click here to submit your answers and display the next page.']")
    public WebElement nextButton;
    public By pageTitleHeading = By.id("pageTitleHeading");
    public By personSearchButton = By.cssSelector("#page-action-set- span.middle");
    public String errorMessageOnModalWindow = "ul[id='error-messages']";
    public By caseEligibilityDecision = By.cssSelector("div[data-testid*='CurrentEligibilityChecks'] tr[data-lix] td:nth-child(3)");
    By applicationCaseEvidenceFrame = By.cssSelector("iframe[title='Content Panel - Evidence'][src*='ApplicationCaseEvidence']");
    By personEvidenceFrame = By.cssSelector("iframe[title^='Content Panel - Evidence'][src*='PDCEvidence']");
    By ShortCutMenuIcon = By.cssSelector("a[aria-label='Shortcuts']");
    By appropriateTabBasedOnRole = By.cssSelector("span[title='Clients and Outcomes'],span[title='Teams and Workload'],span[title='Team and Workloads'],span[title='System Configurations'],span[title='Administration Workspace']");
    By programHeaderFrame = By.xpath("//iframe[contains(@page-id,'CommonIntake_applicationCaseHomeContextPanel') or contains(@page-id,'DefaultICProduct_tabDetails') or contains(@title,'Context Panel - Child Winter Heating Assistance')]");
    By applicationStatus = By.cssSelector("div[class='application-case-status'], div[class='pd-status']");
    public By pdcEvidenceFrame=By.xpath("//iframe[@title='Content Panel - Active Evidence']");

    String script = "document.querySelector('a[title=\"Click here to submit your answers and display the next page.\"]').click();";
    By calendarSpmDate = By.xpath("//*[@title='Go to Date dd/MM/yyyy']");

    By calenderGoTodayButton = By.xpath("//a[text()='Go to Today']");
    By calendarFrame = By.xpath("//iframe[contains(@data-content-url,'CalendarPage')]");
    By calendarView = By.xpath("//*[@title='Calendar View']");
    By inboxShortcutIcon = By.cssSelector("#DefaultAppInboxSection-sbc a[aria-label='Shortcuts'] >img");
    By logoutFinal = By.xpath("//*[text()='Log Out']");
    By activeModalDialogFrame = By.cssSelector("iframe[id*='curam_modal_CuramCarbonModal']");
    By proofsOutstandingErrorMessage = By.xpath("//div[contains(text(),'Proofs outstanding. Mark them as')]");
    public By SearchDocumentFrame = By.cssSelector("iframe[title='Content Panel - Document List']");
    By infoBar = By.xpath("//div[text()='Ready for case manager task has not been created as Part2 is not present']");
    /**
     * switches to the tab that contains the matched text
     *
     * @param textOnTab text on the tab
     */
    public SPMBasePage switchToTabContainsText(String textOnTab) {
        logger.info("Switch to the tab that contains text:" + textOnTab);
        switchToDefaultFrame();
        jQueryClick(String.format("$('*[title*=\"%s\"][role=\"tab\"]')", cssEscape(textOnTab) ));
        return this;
    }

    /**
     * switches to the default frame and clicks on the save button
     */
    public void clickSaveButton() {
        logger.info("switch to default frame and click on save button");
        clickModelButton("Save");
    }

    public void clickCancelButton() {
        logger.info("switch to default frame and click on cancel button");
        clickModelButton("Cancel");
    }

    public void clickSaveButtonIEG() {
        logger.info("switch to default frame and click on save button");
        clickModelButtonIEG("Save");
    }

    public void checkForResolutionElseThrowError() {
        waitForDataDisplay();
        if (!isModalWindowExists()) return;
        switchToActiveModalDialog();
        if (!findElements(By.cssSelector("*[id $='error-messages']")).isEmpty()) {
            String ErrorMessage = getText(By.cssSelector("*[id $='error-messages']"));
            if (ErrorMessage.contains("valid money")) {
                String fieldName = ErrorMessage.split("'")[1];
                for (WebElement element : findElements(By.cssSelector(format("input[title='%1$s']", fieldName)))) {
                    String amount = element.getAttribute("value").split("Â£")[1];
                    enterText(element, amount);
                }
                clickSaveButton();
            } else if (ErrorMessage.contains("Discrepancies") || ErrorMessage.contains("item")) {
                clickSaveButton();
            }  else if (ErrorMessage.contains("Days late is > 0 late reason must be entered")) {
                selectValueFromDropdown("Reason For Lateness", "Bereavement");
                clickSaveButton();
            } else if (ErrorMessage.contains("cannot be before the current date and current deadline date")) {
                String deadlineDateTT = getSharedData().spmCalendarDate;
                String xpath = "//label[@title='Deadline Date']/../div//input";
                enterText(By.xpath(xpath), deadlineDateTT);
                clickSaveButton();
            } else if (ErrorMessage.contains("Please select the option")) {
                String optionToSelect = ErrorMessage.substring(ErrorMessage.indexOf('\'')+1,ErrorMessage.lastIndexOf('\''));
                clickModelButton("Back");
                switchToFrameByTitle("Verify Evidence");
                selectValueFromDropdown("Item",optionToSelect);
                clickModelButton("Next");
                clickSaveButton();
            } else if (ErrorMessage.contains("assigned to you")) {
                clickCancelButton();
            }
            else {
                Assert.fail(ErrorMessage);
            }
        }
    }

    /**
     * Switches to a new frame that contains the matching title
     * Note: it will switch to default first and then to the new frame
     *
     * @param title frame title
     */
    public void switchToFrameByTitle(String title) {
        logger.info("switch to default frame and then switch to frame:" + title);
        waitForDataDisplay();
        waitForCondition(() -> {
            getDriver().switchTo().defaultContent();
            waitForCondition(ExpectedConditions.frameToBeAvailableAndSwitchToIt(getElement(format("iframe[title *=\"%s\"]", title))));
            return true;
        }, 50, "unable to switch to the frame :" + title);
    }

    /**
     * Switches to a new frame that contains the matching title
     * Note: it will switch from existing frame to the new frame
     *
     * @param title frame title
     */
    public void switchToFrame(String title) {
        logger.debug("switch to new frame from an existing frame:" + title);
        waitForDataDisplay();
        waitForCondition(() -> {
            waitForCondition(ExpectedConditions.frameToBeAvailableAndSwitchToIt(getElement(format("iframe[title *=\"%s\"]", title))));
            return true;
        }, 50, "unable to switch to the frame :" + title);
    }



    /**
     * Enters the value into the text box or textarea  using the field labels
     * For example:
     * enterValueInto("First Name","firstName")
     *
     * @param textBoxLabel name/title of the field  ex: First Name, Reference
     * @param value        value to enter into that text box
     */
    public void enterValueInto(String textBoxLabel, String value) {
        logger.debug("enter the text into the field:" + textBoxLabel);
        waitForDataDisplay();
        By element = By.cssSelector(format("input[title*=\"%1$s\"],input[aria-label*=\"%1$s\"],textarea[title*=\"%1$s\"]", textBoxLabel));
        enterText(element, value);
    }

    /**
     * sets the date into the date fields
     *
     * @param label date field label
     * @param date  date to be entered into the date field
     */
    public void setDateField(String label, String date) {
        logger.info("enter the date value into the date field:" + date);
        setFieldValue(label, date);
    }

     /**
     * Updates a field in the application with the provided value.
     * The method first checks the type of the field based on its label and then performs the update accordingly.
     * If the field is a combobox (drop-down), it selects the specified value from the dropdown options.
     * If the field is a text input, it enters the given value into the text input.
     * If the field is neither a combobox nor a text input, and the provided value is null or empty,
     * it sets the date field to the current date.
     *
     * @param fieldLabel  The label of the field to be updated.
     * @param fieldValue  The value to update the field with. For combobox, it represents the value to select;
     *                    for text input, it is the text to be entered; for other fields, it can be null or empty.
     *
     * @throws NoSuchElementException if the field with the given label is not found in the application.
     * @throws IllegalArgumentException if an invalid field type is encountered or if the provided fieldValue
     *                                  is invalid for the corresponding field type.
     */
    public void updateFieldWithValue(String fieldLabel, String fieldValue) {
        if (containsElements(format("input[title*='%s'][role='combobox']", fieldLabel))) {
            selectValueFromDropdown(fieldLabel, fieldValue);
        } else if (containsElements(format("input[title*='%s'].text", fieldLabel))) {
            enterValueInto(fieldLabel, fieldValue);
        } else {
            if (isNullOrEmpty(fieldValue)) {
                String formatted_date;
                formatted_date = DateHelper.getRelativeDateFromAnyDay(getSharedData().spmCalendarDate, "SPM Calendar Date", "dd/MM/yyyy");
                setDateField(fieldValue, formatted_date);
            }
        }
    }

    /**
     * sets the field value using jquery,
     *
     * @param label field label
     * @param value value to be set into the field
     */
    public void setFieldValue(String label, String value) {
        String query = format(" $('input[aria-label^=\"%1$s\"],input[title*=\"%1$s\"],label:contains(\"%1$s\") +div input')",  cssEscape(label));
        String isElementDisplayed = format("return %1$s.length>0;", query);
        String elementToSetValue = format("$(function(){ %1$s.first().val(\"%2$s\");})", query, value);
        logger.info("click on the element: " + elementToSetValue);
        waitForCondition(() -> {
            if ((boolean) evaluateJavascript(isElementDisplayed)) {
                evaluateJavascript(elementToSetValue);
                return true;
            }
            return false;
        }, "Failed to click on the element: " + script);
    }


    /**
     * Expands the shortcuts menus under specific tab
     * if the short-cuts menu is already expanded it won't do anything.
     * For Example:
     * expandShortCuts("Inbox")
     *
     * @param tab provide the name of the tab section
     */
    public void expandShortCuts(String tab) {
        logger.info("switch to tab :" + tab + " and expand the shortcuts Menu");
        waitForDataDisplay();
        if (tab.equals("Inbox")) {
            waitForCondition(() -> {
                if (getAttribute(By.cssSelector("#DefaultAppInboxSection-sbc a[aria-label='Shortcuts']"), "aria-expanded").equals("false")) {
                    click(inboxShortcutIcon);
                }
                return true;
            }, "failed to expand the shortcuts menu");
        } else {
            waitForCondition(() -> {
                if (getElement(ShortCutMenuIcon).getAttribute("aria-expanded").equals("false")) {
                    click(By.cssSelector("img.shortcutsPanelIcon"));
                }
                return true;
            }, "failed to expand the shortcuts menu");
        }
    }

    /**
     * closes all the tabs that are opened under different sections, ex: client and outcomes , inbox and etc..
     * For Example:
     * closeAllOpenTabs()
     */
    public SPMBasePage closeAllOpenTabs() {
        logger.info("close all open tabs");
        waitForDataDisplay();
        switchToDefaultFrame();
        click(appropriateTabBasedOnRole);
        try {
            evaluateJavascript("document.querySelectorAll(\"button[title^='Close']\").forEach(element => element.click());");
        } catch (Exception e) {
            logger.info("No tabs to close");
        }
        return this;
    }

    /**
     * Switches to new tab in SPM
     * For example:
     * switchToTab("Inbox")
     *
     * @param tabName provide the exact label name on the tab, examples: Inbox, Evidence, Eligibility Checks etc..
     */
    public SPMBasePage switchToTab(String tabName) {
        logger.debug("switch to default frame and click on the tab:" + tabName);
        waitForDataDisplay();
        waitForPageLoading();
        switchToDefaultFrame();
        clickOnTab(tabName);
        return this;
    }

    /**
     * clicks on the tab
     *
     * @param tabName name of the tab
     */
    public void clickOnTab(String tabName) {
        logger.info("click on the tab without switching to default frame Tab Name:" + tabName);
        String script = String.format("$('span[title^=\"%1$s\"][role=\"tab\"]:visible').last()", cssEscape(tabName));
        waitForCondition(() -> {
            jQueryClick(script);
            waitForDataDisplay();
            waitForPageLoading();
            return evaluateJavascript(format("return %1$s.attr(\"aria-selected\")", script)).equals("true");
        }, "Failed to click on the selected tab: " + tabName);
    }

    /**
     * selects the sub tabs under the table,
     *
     * @param childTab tab name to select
     */
    public void selectSubTab(String childTab) {
        logger.info("switch to default frame and select the sub tab or child tab : " + childTab);
        switchToDefaultFrame();
        String script = String.format("$('div[title=\"%1$s\"][role=\"button\"]:visible').last()",cssEscape(childTab));
        waitForCondition(() -> {
            jQueryClick(script);
            return (Boolean) evaluateJavascript(String.format("return $('div[title=\"%1$s\"][role=\"button\"]:visible').last().parent().attr(\"class\").indexOf(\"not-selected\")==-1", childTab));
        }, "Failed to click on the  selected subTab: " + childTab);
        waitForDataDisplay();
    }

    /**
     * closes the tab based on the name, it first switches to a specified section and close the tab under it.
     * For Example:
     * closeTabByName("Client and Outcomes", pdcType)
     *
     * @param section         provide the section name, it's the main toolbar option
     * @param tabContainsText provide the name of the tab to be closed
     */
    public void closeTabByName(String section, String tabContainsText) {
        logger.info("close the open tab that contain text : " + tabContainsText);
        switchToDefaultFrame();
        String tabClosures = "button[title^='Close']";
        if (containsElements(tabClosures)) {
            if (tabContainsText.equals("last")) {
                jQueryClick(format("$('button[title^=\"Close\"]:visible').last()", tabClosures));
                return;
            }
            if (tabContainsText.equals("first")) {
                jQueryClick(format("$('button[title^=\"Close\"]:visible').first()", tabClosures));
                return;
            }
            performActionClick(By.cssSelector(String.format("span[title*='%s'] +button", tabContainsText)));
        }

    }

    /**
     * selects the specified menu option from the left side shortcut menu
     * For Example:
     * selectOptionFromShortcutsMenu("Clients and Outcomes", "Searches", "Person")
     *
     * @param tab            provide the name of the main toolbar tab name
     * @param searchSection  provide the name of the section under which your option exist
     * @param optionToSelect provide the name of the option to select from the shortcut menu
     */
    public void selectOptionFromShortcutsMenu(String tab, String searchSection, String optionToSelect) {
        logger.info("switch to tab " + tab + "and select the section :" + searchSection + " option:" + optionToSelect);
        By shortcutSection = By.cssSelector(String.format("span[title='%s']", searchSection));
        String shortcutOptionBy = format("div[aria-label=\"%1$s\"] a[title^=\"%2$s\"]", cssEscape(searchSection) , cssEscape(optionToSelect) );
        expandShortCuts(tab);
        waitForCondition(() -> {
            click(shortcutSection);//expand section
            if (!Objects.equals(optionToSelect, "")) jQueryClick(shortcutOptionBy);// select option
            return true;
        }, "failed to select the option from shortcuts menu");
        waitForDataDisplay();
    }

    /**
     * searches and selects the person record based on reference , first name , last name
     * if the record doesn't appear in first time then it will re-try for up to 8 mins
     * For Example:
     * selectPersonRecord(getSharedData().nino, "", "")   => search by NINO
     * selectPersonRecord("", "FirstName", "LastName")   => search by first name and last name
     *
     * @param nino             provide NINO, if the value is null or empty it will go by first name and last name
     * @param personFirstName  first name
     * @param personSecondName last or second name
     */
    public void selectPersonRecord(String nino, String personFirstName, String personSecondName) {
        searchPerson(nino, personFirstName, personSecondName);
        jQueryClick("table[summary^=\"Search Results\"] tr[data-lix]  .ac");
        waitForDataDisplay();
        logger.info("Navigate to most recent application");
    }

    /**
     * searches the person record based on NINO , first name , last name, shortAddress
     * For Example:
     * searchPerson(personNino, personFirstName, personSecondName, shortAddress)
     * searchPerson("", firstName, lastName,shortAddress);
     *
     * @param nino       person NINO
     * @param personFirstName  person first name
     * @param personSecondName person last name
     * @param shortaddress person address
     */
    public void searchPerson(String nino, String personFirstName, String personSecondName, String shortaddress) {
        logger.info("Search for the record, using PersonNINO:" + nino + " PersonFirstName:" + personFirstName + " personSecondName:" + personSecondName);
        closeAllOpenTabs();
        selectOptionFromShortcutsMenu("Clients and Outcomes", "Searches", "Person");
        switchToFrameFromDefault(SearchPersonFrame);
        if (isNotNullOrEmpty(nino)) {
            enterValueInto("Reference", nino);
        } else {
            enterValueInto("First Name", personFirstName);
            enterValueInto("Last Name", personSecondName);
            enterValueInto("Address Line 1",shortaddress);
        }
        waitForCondition(() -> {
            click(personSearchButton);
            return containsElements("table[summary^='Search Results'] tr[data-lix]");
        }, 480, "Person not found in 8 minutes of search");
    }

    /**
     * searches and selects the person record based on reference , first name , last name, shortAddress
     * For Example:
     * selectPersonRecord("", "FirstName", "LastName","shortAddress")   => search by first name and last name
     *
     * @param nino       person NINO
     * @param personFirstName  person first name
     * @param personSecondName person last name
     * @param shortAddress person address
     */
    public void selectPersonRecord(String nino, String personFirstName, String personSecondName, String shortAddress) {
        searchPerson(nino, personFirstName, personSecondName, shortAddress);
        performActionClick(By.cssSelector("table[summary^='Search Results'] tr[data-lix]  .ac"));
        logger.info("Navigate to most recent application");
        waitForPageLoading();
    }

    /**
     * searches the person record based on NINO , first name , last name
     * For Example:
     * searchPerson(personNino, personFirstName, personSecondName)
     * searchPerson("", firstName, lastName);
     *
     * @param nino             person NINO
     * @param personFirstName  person first name
     * @param personSecondName person last name
     */
    public void searchPerson(String nino, String personFirstName, String personSecondName) {
        logger.info("Search for the record, using PersonNINO:" + nino + " PersonFirstName:" + personFirstName + " personSecondName:" + personSecondName);
        closeAllOpenTabs();
        waitForCondition(() -> {
            selectOptionFromShortcutsMenu("Clients and Outcomes", "Searches", "Person");
            return containsElements("iframe[title='Content Panel - Person Search'][src*='Person_search']");
        }, "Person search frame not displayed");
        switchToFrameFromDefault(SearchPersonFrame);
        if (isNotNullOrEmpty(nino)) {
            enterValueInto("Reference", nino);
        } else {
            enterValueInto("First Name", personFirstName);
            enterValueInto("Last Name", personSecondName);

        }
        waitForCondition(() -> {
            jQueryClick("$('div[id*=\"page-action-set-\"] a:contains(\"Search\")')");
            waitForDataDisplay();
            return containsElements("table[summary^='Search Results'] tr[data-lix]");
        }, 660, "Person not found in 8 minutes of search");
    }

    /**
     * selects person record based on NINO
     * For Example:
     * selectPersonRecord(getSharedData().nino)
     *
     * @param personNino person Nino
     */
    public void selectPersonRecord(String personNino) {
        selectPersonRecord(personNino, "", "","");
    }

    /**
     * selects PDC case through the searches menu
     * For Example:
     * selectPDCCase(sharedData.cdpPdcNumber)
     *
     * @param reference provide the PDC Number
     */
    public void selectPDCCase(String reference) {
        logger.info("Search for the pdc case, using reference:" + reference);
        closeAllOpenTabs();
        selectOptionFromShortcutsMenu("Clients and Outcomes", "Searches", "Case");
        switchToFrameByTitle("Case Search");
        By referenceBy = By.cssSelector("input[title='Reference'][data-testid*='Reference']");
        enterText(referenceBy, reference);
        waitForCondition(() -> {
            click(personSearchButton);
            return containsElements("table[summary^='Search Results'] tr[data-lix]");
        }, 360, "Person not found in 6 minutes of search");
        selectRecordFromTable(reference);
        logger.info("Navigate to Pdc case");
    }

    /**
     * Refresh the data table, if the table contains a refresh icon , you can call this method to refresh the records.
     */
    public SPMBasePage refreshPanel() {
        String cssSelector = "a[title=\"Refresh\"],img[alt=\"Refresh\"]";
        logger.debug("click refresh button on the table using: " + cssSelector);
        waitForConditionWithoutException(() -> {
            waitForDataDisplay();
            if (!findElements(By.cssSelector(cssSelector)).isEmpty()) {
                jQueryClick(cssSelector);
                return true;
            }
            return false;
        }, 30, "Failed to click on the element: " + cssSelector);
        return this;
    }


    /**
     * Refreshes the frame that contains the PDC status updates
     */
    public void refreshChallenges() {
        logger.debug("refresh the challenges page to get the update status or details");
        if(!isFrameAlreadyDefault()){
            switchToDefaultFrame();
        }
        clickOnTab("Challenges");
        switchToframeByContentPanelTitle("Content Panel - Challenges");
        refreshPanel();
        switchToDefaultFrame();

    }

    /**
     * Switches to the Evidences section, it first switches to the tab and then to the frame.
     *
     * @param caseType select case type, it only works of person record level and application level
     */
    public void switchToEvidenceSection(CaseType caseType) {
        logger.info("switch to application case Evidence section");
        switch (caseType) {
            case APPLICATIONCASE:
                switchToTab("Evidence").selectSubTab("Evidence");
                switchToFrameFromDefault(applicationCaseEvidenceFrame);
                break;
            case PERSONRECORD:
                switchToTab("Evidence").selectSubTab("Evidence");
                switchToFrameFromDefault(personEvidenceFrame);
                break;
            case PDCCASE:
                switchToTab("Evidence").selectSubTab("Active Evidence");
                switchToFrameFromDefault(pdcEvidenceFrame);
                break;
            default:
                break;
        }
    }

    /**
     * selects the option from the dropdown list based the dropdown field label
     * if you pass empty string it will select the first valid text option [excludes blank value]
     * For leaving the dropdown to blank pass the  option value as "Blank value"
     * For Example:
     * selectValueFromDropdown("Case Participant", caseParticipantName);
     * selectValueFromDropdown("Case Participant", "") => selects first valid value
     * selectValueFromDropdown("Case Participant", "Blank value") => leaves the drop-down value to empty
     *
     * @param label          drop down  field label
     * @param optionToSelect option to select from the drop-down, for first option pass "" and for first available value pass "Blank Value"
     */
    public SPMBasePage selectValueFromDropdown(String label, String optionToSelect) {
        String option = isNullOrEmpty(optionToSelect) ? "" : optionToSelect;
        logger.debug("select option: " + option + "from dropdown: " + label);
        By dropdownInput = By.cssSelector(String.format("input[title*=\"%s\"]", label.replace("'","\\'")));
        String expandButton = format("input[title*=\"%s\"] ~button[title*=\"Open menu\"]", cssEscape(label));
        By expandDropDown = By.cssSelector(expandButton);
        String elementId = getAttribute(dropdownInput,"id");
        By selectOption = By.xpath(String.format("//div[contains(@id,\"downshift\")]/div[contains(text(),\"%1$s\")]", option));
        By selectEquivalentOption = By.xpath(String.format("//div[contains(@id,\"downshift\")]/div[text()=\"%1$s\"]", option));
        if (containsElements(format("$('%1$s')", expandButton))) {
            click(expandDropDown);
            if (isNullOrEmpty(option)) {
                click(By.xpath("(//div[contains(@id,'downshift')]/div/div[text()!=''])[1]"));
                return this;
            }
            else if (option.equals("Other Benefits CFP")) {
                enterText(dropdownInput,"" + Keys.DOWN);
                click(By.xpath(String.format("//div[@id='downshift-0-item-2']")));
                return this;
            }
            else if (option.equals("Blank value")) {
                enterText(dropdownInput,"" + Keys.DOWN);
                click(By.xpath(String.format("//div[@class=\"bx--list-box__menu-item__option\" or @class=\"dijitReset dijitMenuItem\" and contains(@id,\"%1$s\")][text()=\"\"]",elementId)));
                return this;
            }
            if (findElements(selectOption).size() > 1) {
                click(selectEquivalentOption);
            } else {
                click(selectOption);
            }
        } else if (option.equals("Ireland")) {
            enterText(dropdownInput,"" + Keys.DOWN);
            click(By.xpath(String.format("//div[@class=\"bx--list-box__menu-item__option\" or @class=\"dijitReset dijitMenuItem\" and contains(@id,\"%1$s\")][text()=\"%2$s\"]",elementId,  option)));
            return this;
        }else {
            selectValueFromDropDownByIdMap(label, option);
        }
        return this;
    }

    /**
     * selects the value from the dropdown selection, don't make this public. only used for V7 style dropdowns
     *
     * @param label  dropdown label
     * @param option option to select from the dropdown
     */
    private void selectValueFromDropDownByIdMap(String label, String option) {
        By dropdownInput = By.cssSelector(format("input[title*=\"%1$s\"][aria-autocomplete]", cssEscape(label)));
        String dropDownId = getAttribute(dropdownInput, "id");
        By dropDownButton = By.cssSelector(format("div[widgetid='%s'] input", dropDownId));
        By optionToSelect = By.cssSelector(format("div[id*=\"%1$s\"][title*=\"%2$s\"]", dropDownId, option));
        By firstValidOption = By.cssSelector(format("div[id*=\"%1$s\"][item]:not([aria-label])", dropDownId));
        By textBox = By.cssSelector(format("input[title*=\"%1$s\"][value=''],input[title*=\"%1$s\"]", cssEscape(label)));

        try {
            enterText(textBox, option + Keys.DOWN);
            if (isNullOrEmpty(option)) {
                click(firstValidOption);
                return;
            }
            click(optionToSelect);
        } catch (AssertionError | Exception exception) {
            try {
                clickAndWaitForElement(dropDownButton, firstValidOption);
                click(optionToSelect);
            } catch (AssertionError | Exception ex) {
                enterText(textBox, option + Keys.TAB);
            }
        }
    }


    /**
     * Enters the text into the text box using its associated label
     *
     * @param question textbox label, it can be label of text box or textarea
     * @param val      value to enter into the text box or text area
     */
    public void answerQuestionByEnteringTextInInputBox(String question, String val) {
        enterValueInto(question, val);
    }


    /**
     * enable a checkbox where the label appears on the left side of the Checkbox
     */
    public SPMBasePage clickCheckBoxFollowedByText(String textVal) {
        clickCheckBox(textVal);
        return this;
    }

    /**
     * click on the next button and will make sure it enters into the new screen
     * Note: use this method only if the page has h2 tag in that frame
     */
    public void continueToNextPage() {
        logger.debug("click on the next button and make sure it moved to next page");
        waitForDataDisplay();
        String pageSourceBefore = getDriver().getPageSource();
        String query = "var s= false; var selector =document.querySelector(\"a[title*='Click here to submit your answer']\");selector.onclick=function(){s= true};selector.click();return s;";
        Supplier<Boolean> isScreenChanged = () -> (Boolean) evaluateJavascript(query);
        waitForConditionWithoutException(() -> {
            logger.debug("click on next button currentPageTitle:" + getText(pageTitleHeading));
            boolean isPageMoved = isScreenChanged.get() && !getDriver().getPageSource().equals(pageSourceBefore);
            logger.info("Moved to next page: " + isPageMoved);
            return isPageMoved;
        }, 30, "Unable to move to a next page");
    }

    public void continueToNextPageIEG()  {
        waitForDataDisplay();
        if (getText(pageTitleHeading).contains("Correspondence Address Search Result") || getText(pageTitleHeading).contains("Health care professional's address search result"))
        {
            continueToNextPage();
        }
        else
            nextButton.click();
    }

    /**
     * Below method is to click on the Next button in the ApplicationCase modal window
     */
    public void clickNextButton() {
        logger.info("Go to Next Page");
        clickButtonByName("Next");
        waitForDataDisplay();
    }

    /**
     * verifies the text field contains a specific text, works on text fields, dropdowns, text areas
     *
     * @param fieldLabel         field name, it can be a start of the label or end of the label or can be of full label
     * @param expectedFieldValue expected value in the field
     */
    public void textFieldValueShouldContain(String fieldLabel, String expectedFieldValue) {
        By fieldValue = By.cssSelector(String.format("input[title*=\"%1$s\"]", fieldLabel));
        shouldContainValue(fieldLabel + " field value not matched", fieldValue, expectedFieldValue);
    }

    public void sectionFieldValueShouldBe(String fieldLabel, String expectedFieldValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedFieldValue);
        By fieldValue = By.xpath(String.format("//label[contains(text(),\"%1$s\")]/../div", fieldLabel));
        shouldBeEqualToText(fieldLabel + " field value not matched", fieldValue, expectedFieldValue);
    }

    public void sectionFieldValueShouldContain(String fieldLabel, String expectedFieldValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedFieldValue);
        By fieldValue = By.xpath(String.format("//label[contains(text(),\"%1$s\")]/../div", fieldLabel));
        shouldContainText(fieldLabel + " field value not matched", fieldValue, expectedFieldValue);
    }

    /**
     * verifies that field value contains an expected value
     *
     * @param fieldLabel         field name, it can be a start of the label or end of the label or can be of full label
     * @param expectedFieldValue expected value in the field
     */
    public void fieldValueShouldContain(String fieldLabel, String expectedFieldValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedFieldValue);
        By fieldValue = By.xpath(format("//*[contains(text(),\"%1$s\")]/../../div | //*[@class= \"%1$s\"]", fieldLabel));
        shouldContainText(fieldLabel + " field value not matched", fieldValue, expectedFieldValue);
    }
    /**
     * verifies that field value contains an expected value
     *
     * @param fieldLabel         field name, it can be a start of the label or end of the label or can be of full label
     * @param expectedFieldValue expected value in the field
     */
    public void fieldValueShouldBe(String fieldLabel, String expectedFieldValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedFieldValue);
        By fieldValue = By.xpath(String.format("//*[contains(text(),\"%1$s\")]/../../div | //*[@class= \"%1$s\"]", fieldLabel));
        shouldBeEqualToText(fieldLabel + " field value not matched", fieldValue, expectedFieldValue);
    }
    public void contentPanelFieldValueShouldBe(String fieldLabel, String expectedFieldValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedFieldValue);
        String query = format("var filteredListItem = [...document.querySelectorAll('div[class*=\"context-panel-details\"] td,div[class*=\"context-panel-details\"] th')].find(li => li.textContent.trim() === \"%1$s\"); var l=filteredListItem.nextSibling;return l.textContent.trim()",fieldLabel);
        waitForConditionWithoutException(() -> evaluateJavascript(query).toString().contains(expectedFieldValue), 20, "");
        assertThat(fieldLabel + " field value not matched", evaluateJavascript(query).toString().replace("\n", ""), equalTo(expectedFieldValue));
    }
    public void contentPanelFieldValueShouldContain(String fieldLabel, String expectedFieldValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedFieldValue);
        String query = format("var filteredListItem = [...document.querySelectorAll('div[class*=\"context-panel-details\"] td,div[class*=\"context-panel-details\"] th')].find(li => li.textContent.trim() === \"%1$s\"); var l=filteredListItem.nextSibling;return l.textContent.trim()",fieldLabel);
        waitForConditionWithoutException(() -> evaluateJavascript(query).toString().contains(expectedFieldValue), 20, "");
        assertThat(fieldLabel + " field value not matched", evaluateJavascript(query).toString().replace("\n", ""), containsString(expectedFieldValue));
    }

    /**
     * gets the value of the field based on label
     * @param fieldLabel
     * @return
     */
    public String getFieldValue(String fieldLabel) {
        By fieldValue = By.xpath(String.format("//*[contains(text(),\"%1$s\")]/../../div | //*[@class= \"%1$s\"]", fieldLabel));
        return getText(fieldValue);
    }

    /**
     * clicks on the button using name on the button
     *
     * @param name name on the button
     */
    public void clickButtonByName(String name) {
        logger.debug("click on the button using jquery, Name on the Button:" + name);
        waitForDataDisplay();
        String script = String.format("$('span:contains(\"%1$s\"),a:contains(\"%1$s\"),button:contains(\"%1$s\"),button[title*=\"%1$s\"],a[aria-label=\"%1$s\"]')", cssEscape(name));
        jQueryClick(script);
        waitForDataDisplay();
    }

    /**
     * check for error message, if contains error message throws the exception with the error message
     */
    public void checkForErrorMessages() {
        logger.debug("switch to a open model frame and check for the error messages");
        AtomicBoolean isModalWindowExists = new AtomicBoolean(false);
        waitForConditionWithoutException(() -> {
            isModalWindowExists.set(isModalWindowExists());
            return !(isModalWindowExists.get());
        }, 5, "Failed to click on save button");
        if (isModalWindowExists.get()) {
            checkForResolutionElseThrowError();
        }

    }

    /**
     * checks the modal window is launched
     * @return returns true if it's launched otherwise false
     */
    public boolean isModalWindowExists() {
        return containsElements("div[id$='modal-container']");
    }

    /**
     * Below method is to verify the page headers on the ApplicationCase modal windows
     */
    public void verifySPMPageHeader(String textVal) {
        waitForDataDisplay();
        scrollToPageTop();
        shouldContainsToIgnoringCase("Incorrect header title", pageTitleHeading, textVal);
    }

    /**
     * The below method is to click on a radio button by given label text in the ApplicationCase modal window
     */
    public void selectQuestionAnswerRadios(String question, String answer) {
        waitForDataDisplay();
        String radioButton = String.format("$('tr:contains(\"%1$s\") label:contains(\"%2$s\")')", cssEscape(question), cssEscape(answer));
        jQueryClick(radioButton);
    }

    /**
     * clicks on the modal save button and validates the error messages
     * Note: Waits for the modal window to be closed
     */
    public void clickModelSave() {
        clickSaveButton();
        checkForErrorMessages();
    }

    /**
     * switches to the active model window frame
     */
    public void switchToActiveModalDialog() {
        switchToFrameFromDefault(activeModalDialogFrame);
    }

    /**
     * close the all the tabs that are available in tasks section
     */
    public void closeAllOpenTabsInInbox() {
        switchToTab("Inbox");
        waitForCondition(() -> {
            if (containsElements("button[title*='Close - Task']")) {
                Actions action = new Actions(getDriver());
                action.contextClick(getElement(By.cssSelector("button[title*='Close - Task']"))).build().perform();
                click(By.id("curam_widget_MenuItem_3_text"));
                return true;
            }
            return true;
        }, "Failed to close all the open tabs");

    }

    /**
     * This below method confirms if current frame already in default or not. If Frame already a default will return true
     */
    public boolean isFrameAlreadyDefault(){
            if(getDriver().switchTo().defaultContent().getPageSource()!=null)
                return true;
            else
                return false;
    }

    /**
     * Verifies the status of the application, if the expected is not update, it will retry till to the default timeout
     *
     * @param pdcStatus expected status of the pdc application
     */
    public void verifyApplicationStatus(String pdcStatus) {
        logger.info("wait for the expected PDC status and verify");
        By pdcContextPanel = By.cssSelector("iframe[title*='Disability Payment'][page-id='DefaultICProduct_tabDetails'],iframe[page-id='DefaultICProduct_tabDetails']");
        waitForDataDisplay();
        if(!isFrameAlreadyDefault()){
            switchToDefaultFrame();
        }
        if (pdcStatus.equalsIgnoreCase("closed")) {
            switchToFrame(programHeaderFrame);
        } else {
            switchToFrame(pdcContextPanel);
        }
        waitForCondition(() -> {
            refreshChallenges();
            if (pdcStatus.equalsIgnoreCase("closed")) {
                switchToFrame(programHeaderFrame);
            } else {
                switchToFrame(pdcContextPanel);
            }
            waitForDataDisplay();
            return getText(applicationStatus).equalsIgnoreCase(pdcStatus);
        }, 120, "status not updated in the given time, expected:" + pdcStatus + " and actual is :" + getText(applicationStatus));
        shouldBeEqualToText("PDC status is not matched", applicationStatus, pdcStatus);
    }

    /**
     * selects the option from the section tab menu options from the displayed page
     *
     * @param menuOption option to select from the tab widget menu
     */
    public void selectOptionFromDisplayMenu(String menuOption) {
        waitForDataDisplay();
        String tabExpansion = "span[class *='dijitHasDropDownOpen'],span[class *='dijitDropDownButtonOpened']";
        clickAndWaitForElement("span[title=\"Click to display menu\"]:visible,span[title=\"Click to display actions menu\"]", tabExpansion);
        if (isNotNullOrEmpty(menuOption)) {
            jQueryClick(format("table[role=\"menu\"] td:contains(\"%1$s\")", cssEscape(menuOption)));
        }

    }
    public void selectOptionFromMainDisplayMenu(String menuOption){
        switchToDefaultFrame();
        selectOptionFromDisplayMenu(menuOption);
    }


    /**
     * Edits the evidence in the evidence table
     * Note: Before calling this method, you have to be on the right frame Ex: evidence frame
     *
     * @param matchingText Name of the evidence, it can be of multiple partial text, in case of duplicate it selects first matched record
     */
    public void editEvidence(String... matchingText) {
        logger.info("Edit evidence from the evidence table, Evidence - " + Arrays.toString(matchingText));
        actionOnRecord("Edit", matchingText);
    }

    /**
     * adds the proof to the evidence
     *
     * @param matchingText evidence name
     */
    public void addProofToEvidence(String... matchingText) {
        logger.info("Adding proof to the evidence: " + Arrays.toString(matchingText));
        actionOnRecord("Add", matchingText);
        switchToActiveModalDialog();
    }
    /**
     * Edits the specified row in a table
     * @param rowPartialText unique Partial text of the row, in case of duplicate it selects the first
     */
    public void editRowInTable(String rowPartialText) {
        shouldContainRecordRow(rowPartialText);
        actionOnRecord(rowPartialText, "Edit");
    }

    /**
     * performs the task search and select the task using task reference.
     * @param task task reference
     */
    public void searchTask(String task) {
        switchToTab("Inbox");
        selectOptionFromShortcutsMenu("Inbox", "Tasks", "Enhanced Task Search");
        switchToFrameFromDefault(By.cssSelector("iframe[title='Content Panel - Inbox']"));
        enterValueInto("Task ID", task);
        click(personSearchButton);
        String filteredTask = "table[summary *='results'] tr[data-lix] .field>a";
        waitForCondition(() -> {
            boolean isRecordDisplayed = containsElements(filteredTask);
            if (isRecordDisplayed) return true;
            click(personSearchButton);
            return false;
        }, "No pending applications cases to select");
        click(By.cssSelector(filteredTask));

    }

    /**
     * gets the full name based on acronym
     *
     * @param applicationAcronym acronym
     */
    public String getApplicationFullName(String applicationAcronym) {
        Map<String, String> caseNameMap = new HashMap<>();
        caseNameMap.put("BSF", "Best Start Food");
        caseNameMap.put("BSG", "Best Start Grant");
        caseNameMap.put("SCP", "Scottish Child Payment");
        caseNameMap.put("YCG", "Young Carer Grant");
        caseNameMap.put("JSP", "Job Start Payment");
        caseNameMap.put("FSP", "FSP");
        caseNameMap.put("CDP", "Child Disability Payment");
        caseNameMap.put("ADP", "Adult Disability Payment");
        caseNameMap.put("WHP", "Winter Heating Payment");
        caseNameMap.put("CSP", "Carer Support Payment");
        return caseNameMap.getOrDefault(applicationAcronym, applicationAcronym);
    }

    /**
     * gets the full name based on acronym
     *
     * @param applicationAcronym acronym
     */
    public String getFullName(String applicationAcronym) {
        Map<String, String> caseNameMap = new HashMap<>();
        caseNameMap.put("BSF", "Best Start Food");
        caseNameMap.put("BSG", "Best Start Grant");
        caseNameMap.put("SCP", "Scottish Child Payment");
        caseNameMap.put("YCG", "Young Carer Grant");
        caseNameMap.put("JSP", "Job Start Payment");
        caseNameMap.put("FSP", "Funeral Support Payment");
        caseNameMap.put("CDP", "Child Disability Payment");
        caseNameMap.put("ADP", "Adult Disability Payment");
        caseNameMap.put("WHP", "Winter Heating Payment");
        caseNameMap.put("CSP", "Carer Support Payment");
        caseNameMap.put("BSF", "Best Start Food");
        return caseNameMap.get(applicationAcronym);
    }

    /**
     * Checks the status of the checkbox, if checkbox is enabled returns true
     *
     * @param checkBoxLabel checkbox label
     */
    public boolean isCheckBoxEnabled(String checkBoxLabel) {
        logger.debug("check the status of the checkbox:" + checkBoxLabel);
        waitForDataDisplay();
        String Jquery = String.format("return $('input[aria-label *=\"%1$s\"],input[title^=\"%1$s\"]').length>0", cssEscape(checkBoxLabel) );
        waitForCondition(() -> (Boolean) evaluateJavascript(Jquery), "check box not present");
        String checkBoxStatus = String.format("return $('input[aria-label^=\"%1$s\"]:checked,input[title^=\"%1$s\"]:checked').length>0", cssEscape(checkBoxLabel));
        return (boolean) evaluateJavascript(checkBoxStatus);
    }

    /**
     * Enables the checkbox based on the checkbox label
     *
     * @param checkBoxLabel checkbox label
     */
    public void enableCheckBox(String checkBoxLabel) {
        if (!isCheckBoxEnabled(checkBoxLabel)) {
            logger.debug("Enable the checkbox:" + checkBoxLabel);
            jQueryClick(String.format("input[title^=\"%1$s\"] +label,input[title$=\"%1$s\"] +label", cssEscape(checkBoxLabel)));
        }
    }

    /**
     * Enables or disables the checkBox that are available in section
     *
     * @param section       section header
     * @param checkBoxLabel label of the checkBox to enable
     */
    public void enableCheckBox(String section, String checkBoxLabel, boolean enableCheckBox) {
        isCheckBoxEnabled(checkBoxLabel);//wait and check at least one matching checkbox is available--> dummy check
        boolean isCheckBoxEnabled = (boolean) evaluateJavascript("return $('section:contains(\"%1$s\") input[aria-label^=\"%2$s\"]:checked').length>0", section, checkBoxLabel);
        String elementToClick = format("$('section:contains(\"%1$s\") input[title^=\"%2$s\"] +label')", section, checkBoxLabel);
        logger.debug("Enable the" + checkBoxLabel + " checkbox:" + enableCheckBox);
        if (enableCheckBox) {
            if (!isCheckBoxEnabled) jQueryClick(elementToClick);
        } else {
            if (isCheckBoxEnabled) jQueryClick(elementToClick);
        }
    }

    /**
     * Disable the checkbox based on the checkbox label
     *
     * @param checkBoxLabel checkbox label
     */
    public void disableCheckBox(String checkBoxLabel) {
        if (isCheckBoxEnabled(checkBoxLabel)) {
            logger.debug("Disable the checkbox:" + checkBoxLabel);
            click(By.cssSelector(String.format("input[title^='%1$s'] +label,input[title$='%1$s'] +label", checkBoxLabel)));
        }
    }

    /**
     * This method to be used for all tyoes of ID & V selection across the program
     *
     * @param section         - Tells about under which category the selection to be made
     * @param checkboxToClick - Tells about which item to be selected
     */
    public void selectCheckBoxUnderSection(String section, String checkboxToClick) {
        jQueryClick(String.format("$('section:contains(\"%1$s\") input[title*=\"%2$s\"] +label')", cssEscape(section) , cssEscape(checkboxToClick)));
    }

    /**
     * Clicks on the checkbox
     *
     * @param label checkbox label
     */
    public void clickCheckBox(String label) {
        String formattedLabel = cssEscape(label);
        try {
            jQueryClick(String.format("$('tr:contains(\"%1$s\") label[title*=\"%1$s\"]')", formattedLabel));
        } catch (Exception e) {
            jQueryClick(String.format("$('tr:contains(\"%s\") label[class^=\"checkbox-touchable-area\"]')", formattedLabel));
        }
    }

    /**
     * Use this method to click on any buttons appearing on Modal pages. Example: Edit/ADD Evidence modal pages
     */
    public void clickModelButton(String... buttonName) {
        logger.debug("switch to default frame and click on the modal window button, Button Name :" + buttonName);
        switchToDefaultFrame();
        String buttonToClick = buttonName.length==1?buttonName[0]:buttonName[1];
        String formatedQuery = format("div[data-dojo-attach-point=\"modalFooter\"] button:contains(\"%1$s\")", cssEscape(buttonToClick));
        for (String button : buttonName) {
            if (button.equals(buttonName[0])) continue;
            formatedQuery += format(", div[data-dojo-attach-point=\"modalFooter\"] button:contains(\"%1$s\")", cssEscape(button));
        }
        logger.debug("switch to default frame and click on the modal window button, Button Name :" + formatedQuery);
        String filteredQuery = format( "var element = $('%1$s').filter(function() {return $(this).text().trim() === \"%2$s\";}).first();element.click();",formatedQuery,cssEscape(buttonToClick));
        evaluateJavascript(filteredQuery);
        waitForDataDisplay();
    }

    public void clickModelButtonIEG(String buttonName) {
        switchToDefaultFrame();
        String xpath = String.format("//button[contains(text(), '%1$s')]", buttonName);
        WebElement modelButton = getDriver().findElement(By.xpath(xpath));
        modelButton.click();
        waitForDataDisplay();
    }

    /**
     * Waits for the records to be appeared in table, if records are not shown in the given time it throws the exception
     * Note: Switch to the table before the call of this method
     */
    public void waitForRecordsToAppearInTable() {
        logger.debug("wait for the records to appear in the table");
        waitForConditionWithoutException(() -> {
            if (!containsElements("tr[data-lix]")) refreshPanel();
            return containsElements("tr[data-lix]");
        }, 30, "Records not found in the table");
    }
    /**
     * Waits for the records to be appeared in table, if records are not shown in the given time it throws the exception
     * Note: Switch to the table before the call of this method
     */
    public void waitForRecordsToAppearInTable(String record,int time) {
        logger.debug("wait for the records to appear in the table");
        waitForConditionWithoutException(() -> {
            if (isRecordExist(record)) return true;
            refreshPanel();
            return false;
        }, time, "Records not found in the table");
    }

    /**
     * finds the matching record based on the search criteria and selects the specified option from the menu
     *
     * @param matchingText    matching text on the record, it can be of multiple text or empty string if you want to select first record
     * @param actionToPerform second matching text on the record
     */
    public void actionOnRecord(String actionToPerform, String... matchingText) {
        String matchingRow = getFormattedRowMatchingQuery(matchingText);
        logger.info("perform requested action on the record that contains text:" + matchingRow + "\t Action to perform:" + actionToPerform);
        String clickMenu = format("%s span[title*=\"Click to display\"]", matchingRow);
        logger.debug("edit query : " + clickMenu);
        waitForDataDisplay();
        waitForPageToBeLoaded();
        logger.info("waitForPageToBeLoaded");
        String tabExpansion = format("table[role='menu'] td:contains('%s')", cssEscape(actionToPerform));
        clickAndWaitForElement(clickMenu, tabExpansion);
        logger.info("clickAndWaitForElement");
        selectMenuOption(actionToPerform);
        logger.info("selectMenuOption");
        waitForDataDisplay();
    }


    /**
     * selects the options from the widget menu
     *
     * @param optionName item to select from the widget menu, if possible try with the first word
     */
    public void selectMenuOption(String optionName) {
        jQueryClick(format("$('table[role=\"menu\"] td:contains(\"%s\"):visible').first()", cssEscape(optionName)));
    }

    /**
     * finds the record with the matching text and verifies the expected text on that record
     *
     * @param expectedMultiText expected text to be appeared on the record
     */
    public SPMBasePage shouldContainRecord(String... expectedMultiText) {
        waitForRecordsToAppearInTable();
        String recordToMatch = format("$('%s')", getFormattedRowMatchingQuery(expectedMultiText));
        logger.info("search for the record that contains the matching text:" + recordToMatch);
        assertTrue("Record not exist in the table, with the matching text query" + recordToMatch, containsElements(recordToMatch));
        return this;
    }

    /**
     Returns a formatted CSS selector for locating a table row based on
     the specified text query. The method concatenates a list of strings into a CSS selector,
     ensuring that each string is properly escaped to prevent injection attacks.
     @param expectedMultiText The list of strings to match against the row in the HTML table.
     @return A CSS selector string that matches the specified text query.
     @throws NullPointerException if any of the expectedMultiText elements is null.
     */
    public SPMBasePage shouldContainRecordRow(int count, String... expectedMultiText) {
        waitForRecordsToAppearInTable();
        String recordToMatch = format("return $('%s').length", getFormattedRowMatchingQuery(expectedMultiText));
        logger.info("search for the record that contains the matching text:" + recordToMatch + " " + "and count equals to : " + count);
        assertThat("Record not exist in the table or count not matched, with the matching text query" + " " + recordToMatch + " count:" + count, Integer.valueOf(evaluateJavascript(recordToMatch).toString()), equalTo(count));
        return this;
    }

    /**
     * Verifies that the table does not contain a record with the specified multi-text values.
     *
     * @param expectedMultiText an array of multi-text values to check for
     * @return the current page object instance for chaining method calls
     * @throws AssertionError if the table contains a record with the specified multi-text values
     */
    public SPMBasePage shouldNotContainRecord(String... expectedMultiText) {
        waitForRecordsToAppearInTable();
        String recordToMatch = format("$('%s')", getFormattedRowMatchingQuery(expectedMultiText));
        logger.info("search for the record that contains the matching text:" + recordToMatch);
        assertTrue("Record exist in the table, with the matching text query" + recordToMatch, !containsElements(recordToMatch));
        return this;
    }


    @NotNull
    public String getFormattedRowMatchingQuery(String... expectedMultiText) {
        StringBuilder recordToMatch = new StringBuilder("tr[data-lix]");
        for (String expectedText : expectedMultiText) {
            if (isNotNullOrEmpty(expectedText)) {
                recordToMatch.append(format(":contains(\"%s\")", cssEscape(expectedText)));
            }
        }
        return recordToMatch.toString();
    }

        /**
         * Purpose: To be globally used to take a screenshot of any SPM page
         * Method Name:takeScreenshot
         * @author:Zak
         */
        public void takeScreenshot(){
            logger.info("taking screenshot of current open page ");
            Serenity.takeScreenshot();
        }

    /**
     * checks the record exists in the table
     *
     * @param textOnRecord text on the record, can be of multiple text
     */
    public boolean isRecordExist(String... textOnRecord) {
        waitForDataDisplay();
        logger.info("verify the existence of the record:" + Arrays.toString(textOnRecord));
        String matchedRecord = format("$('%s')", getFormattedRowMatchingQuery(textOnRecord));
        return containsElements(matchedRecord);
    }

    public void navigateToMyWorkQueues(){
        switchToTab("Inbox");
        selectOptionFromShortcutsMenu("Inbox", "Work Queues", "My Work Queues");
    }
    public String getReference(String firstName, String lastName) {
        logger.info("get the NINO reference of the person having firstName:" + firstName + " and lastName:" + lastName);
        searchPerson("", firstName, lastName,"");
        String reference = getText(By.xpath(format("(//a[contains(text(),'%1$s') and @href])[last()]", firstName + " " + lastName)))
                .split("-")[1].trim();
        return reference;
    }

    /**
     * selects the record from the table(clicks on the first anchor tag)
     *
     * @param matchingText matching text, can be of multiple text. if empty selects the first record
     */
    public void selectRecordFromTable(String... matchingText) {
        waitForDataDisplay();
        String matchingRecord = getFormattedRowMatchingQuery(matchingText);
        logger.info("find the matching record" + matchingRecord + " and select the anchor tag that contains a matching text" + false);
        String matchedRecord = format("$('%s a[href]:visible')", matchingRecord);
        jQueryClick(matchedRecord);
        waitForDataDisplay();
    }

    /**
     * selects the record from the table(clicks on the first anchor tag)
     *
     * @param matchingText matching text, can be of multiple text. if empty selects the first record
     */
    public void selectSpecificRecordFromTable(String recordToSelect,String... matchingText) {
        waitForDataDisplay();
        String matchingRecord = getFormattedRowMatchingQuery(matchingText);
        logger.info("find the matching record" + matchingRecord + " and select the anchor tag that contains a matching text" + false);
        String matchedRecord = format("$('%1$s a[href]:contains(\"%2$s\")')", matchingRecord,recordToSelect);
        jQueryClick(matchedRecord);
        waitForDataDisplay();
    }

    public SPMBasePage shouldContainRecordRow(String... expectedMultiText) {
        waitForRecordsToAppearInTable();
        String recordToMatch = format("$('%s')", getFormattedRowMatchingQuery(expectedMultiText));
        logger.info("search for the record that contains the matching text:" + recordToMatch);
        assertTrue("Record not exist in the table, with the matching text query" + recordToMatch, containsElements(recordToMatch));
        return this;
    }


    /**
     * expands the record for more details
     *
     * @param matchingText pass the matching text on the row to expand
     */
    public void toggleRecord(String... matchingText) {
        waitForDataDisplay();
        String row = getFormattedRowMatchingQuery(matchingText);
        String matchedRecord = format("$('%s a[title=\"Toggle\"]')",  row);
        logger.info("Expands or toggle the record:" + matchedRecord);
        try {
            jQueryClick(matchedRecord);
        } catch (Exception exception) {
            Assert.fail("No matching record found to toggle: " + matchedRecord + "\n" + exception.getMessage());
        }
        waitForDataDisplay();
    }

    /**
     * navigates to the  pages until it found the matched record
     *
     * @param refreshTable if it is set true it will refresh the table and search
     * @param matchingText search the data table using the text on the record
     */
    public void searchRecordUsingPagination(boolean refreshTable, String... matchingText) {
        String recordToFind = format("$('%s')", getFormattedRowMatchingQuery(matchingText));
        logger.info("search the pages using the pagination, record to search:" + recordToFind + " is refresh required:" + refreshTable);
        waitForDataDisplay();
        String paginationCSS = "select[title='Page size']";
        String nextPage = "img[alt='Next page']";
        waitForCondition(() -> {
            if (refreshTable) refreshPanel();
            if (containsElements(paginationCSS)) {
                int totalRecordCount = Integer.parseInt(getText(By.cssSelector("#ROW_INFO P")).split("out of ")[1].replace("]", ""));
                setPagination("45");
                if (containsElements(recordToFind)) return true;
                double size = totalRecordCount / 45.0;
                if (size > 1) {
                    for (int i = 0; i < size; i++) {
                        if (containsElements(recordToFind)) return true;
                        if (containsElements(nextPage)) {
                            click(By.cssSelector(nextPage));
                        }
                    }
                } else {
                    refreshPanel();
                    return false;
                }
            } else {
                if (!containsElements(recordToFind)) {
                    refreshPanel();
                    return false;
                }
            }
        return containsElements(recordToFind);
    },420,"Unable to find the record:"+recordToFind);
}

    /**
     * Set Pagination to display number of the records
     *
     * @param num Number of records to display
     */
    public void setPagination(String num) {
        logger.debug("set pagination limit to : " + num);
        String paginationCSS = "select[title='Page size']";
        waitForCondition(() -> {
            if (containsElements(paginationCSS)) {
                selectDropdownByValue(getElement(cssEscape(paginationCSS)), num);
            }
            return true;
        }, 30, "Unable to set to required pagination count:" + num);
    }

    /**
     * switches to the modal frame
     * it switches to which evidence modal, edit or add new
     */
    public void switchToEvidenceFrameModelByName(String evidenceName) {
        waitForDataDisplay();
        By evidenceModalFrame = By.cssSelector(format("iframe[title*='%s']", evidenceName));
        logger.info("Attempting to switch to Iframe - " + evidenceModalFrame);
        switchToFrameFromDefault(evidenceModalFrame);
    }

    /**
     * In order to use the method, the page object class should inherit from CommonEvidenceObjects
     * The below method should be used from Step Definitions. No need to write separate methods for each and every switch to a different frame
     * Frame Type: Modal Frame
     */
    public void switchToframeByActionTypeAndEvidenceName(String ActionType, String EvidenceName) {
        waitForDataDisplay();
        switchToFrameFromDefault(By.xpath("//iframe[contains(@title,'Modal Frame') and contains(@title,'" + ActionType + "') and contains(@title,'" + EvidenceName + "')]"));
    }


    /**
     * Purpose: To Switch to a Content Panel By its Title Name
     * Frame Type: Content Panel
     */
    public void switchToframeByContentPanelTitle(String ContentPanelTitle) {
        switchToFrameByTitle(ContentPanelTitle);
    }

    /**
     * captures the SPM calendar date and stores it into the shared data
     */
    public void captureCalendarDate() {
        switchToTab("Calendar");
        click(calendarView);
        switchToFrame(calendarFrame);
        click(calenderGoTodayButton);
        waitForDataDisplay();
        sharedData.spmCalendarDate = getAttribute(calendarSpmDate, "value");
        logger.info("SPM Calendar Date: " + sharedData.spmCalendarDate);
    }

    /**
     * logout the user from the SPM, it will handle logouts anywhere from the page
     */
    public void logoutUser() {
        logger.info("Log out from the SPM application");
        switchToDefaultFrame();
        jQueryClick("$('tr[title*=\"Log\"]')");
        performActionClick(logoutFinal);
    }

    public void selectChangeReasonDropdown(String dropDown) {
        selectValueFromDropdown("Change Reason", dropDown);
    }

    /**
     * Purpose: This Common method Handles all type of Input values in the Edit Evidence Modal
     * Types include: dropdown,textbox,date,textarea,checkbox
     */
    public void FillAnswer_Evidence_Modal(String identifier, String data, String field_type) {
        logger.debug("update the field type :" + field_type + " label: " + identifier + "with value :" + data);
        switch (field_type.toLowerCase()) {
            case "dropdown":
                selectValueFromDropdown(identifier, data);
                return;
            case "paralleldropdown":
                List<WebElementFacade> listBoxes = findAll(String.format("input[title^=\"%s\"]", identifier));
                for (int i = 0; i < listBoxes.size(); i++) {
                    selectValueFromDropdown(getAttribute(listBoxes.get(i), "title"), data.split(":")[i]);
                }
                break;

            case "textbox":
            case "textarea":
                enterValueInto(identifier, data);
                break;
            case "date":
                String formatted_date;
                if (data.contains("SPM Calendar Date")) {
                    formatted_date = DateHelper.getRelativeDateFromAnyDay(getSharedData().spmCalendarDate, data, "dd/MM/yyyy");
                } else {
                    formatted_date = DateHelper.getRelativeDateFromToday(data, "dd/MM/yyyy");
                }
                setDateField(identifier, formatted_date);
                break;
            case "checkbox":
                enableCheckBox(identifier);
                break;
        }
    }


    public void vefifyFieldValue(Map<String, String> eligibilitySummary) {
        for (String eligibility : eligibilitySummary.keySet()) {
            fieldValueShouldContain(eligibility, eligibilitySummary.get(eligibility));
        }
    }

    /**
     * checks the eligibility status of the record
     *
     * @param eligibilityStatus expected eligibility status
     */
    public void checkEligibilityStatus(String eligibilityStatus) {
        logger.debug("check eligibility status , expected:" + eligibilityStatus);
        switchToTab("Eligibility Checks");
        switchToFrameByTitle("Eligibility Checks");
        waitForRecordsToAppearInTable();
        shouldBeEqualToText("the case decision displayed as  ", caseEligibilityDecision, eligibilityStatus);
    }

    /**
     * adds the new evidence to the existing evidence list in application case
     *
     * @param evidenceName evidence to add into the application case evidences
     */
    public void addNewEvidence(String evidenceName) {
        logger.debug("add new evidence:" + evidenceName);
        if (!evidenceName.equals("CWHA Decision Evidence")) {
            switchToTab("Evidence");
        }
        switchToFrameByTitle("Evidence");
        if (containsElements("a[title='New']")) {
            clickLinkAndWaitForModalFrame("New", "Evidence");
        } else {
            selectOptionFromDisplayMenu("New");
        }
        switchToActiveModalDialog();
        switchToFrameByTitle("New Evidence");
        waitForCondition(() -> {
            actionOnRecord("Add", evidenceName);
            switchToDefaultFrame();
            boolean isNewEvidenceWindowOpened = !findElements(By.cssSelector(format("iframe[title*='%s']", evidenceName))).isEmpty();
            if (!isNewEvidenceWindowOpened) {
                switchToActiveModalDialog();
                return false;
            }
            return true;
        }, "failed to open the new evidence:" + evidenceName);
        switchToEvidenceFrameModelByName("New " + evidenceName);
    }

    /**
     * verifies the evidences present in evidence section and also validates the count of evidences
     * it works for both person level and application level
     *
     * @param evidences        evidences to validate
     * @param timeOutInSeconds within how much time we are expecting the evidence to available
     */
    public void verifyEvidencesAndCount(List<Map<String, String>> evidences, int timeOutInSeconds) {
        logger.debug("verify evidence and count");
        Map<String, String> expectedEvidences = new HashMap<>();
        for (Map<String, String> evidence : evidences) {
            Object[] keys = (evidence.keySet()).toArray();
            expectedEvidences.put(evidence.get(keys[0]), evidence.get(keys[1]));
        }
        if (containsElements("*[title='Issues or Verifications exist']")) {
            verifyRecordCount(expectedEvidences, 3, timeOutInSeconds);
        } else {
            verifyRecordCount(expectedEvidences, 2, timeOutInSeconds);
        }
    }

    public Integer getRecordCountByColumnFilter(String textOnRecord, int columnToFilterIndex) {
        waitForDataDisplay();
        logger.info("verify the existence of the record:" + textOnRecord);
        List<String> evidence = getTextOfAllElements(format("tr[data-lix]>td:nth-child(%1$s)", columnToFilterIndex));
        int recordCount = (int) evidence.stream().filter(evi -> evi.equals(textOnRecord)).count();
        return recordCount;
    }

    /**
     * verify the records and count of the records in table
     *
     * @param expectedRecords  matching text of the record
     * @param columnIndex      On which column number we want to verify
     * @param timeOutInSeconds how much should wait for the records to appear, timeout in seconds
     */
    public void verifyRecordCount(Map<String, String> expectedRecords, int columnIndex, int timeOutInSeconds) {
        logger.debug("verify the record count");
        for (String evidence : expectedRecords.keySet()) {
            waitForRecordsToAppearInTable(evidence,30);
            waitForCondition(() -> {
                        boolean status = getRecordCountByColumnFilter(evidence,columnIndex) == Integer.parseInt(expectedRecords.get(evidence));
                        if (status) return true;
                        refreshPanel();
                        return false;
                    },timeOutInSeconds,
                    format("evidence count not matched for %1$s: Actual:%2$s, Expected:%3$s", evidence, getRecordCountByColumnFilter(evidence,columnIndex), expectedRecords.get(evidence)));
        }
    }

    public void assertErrorForProofsOutstandingAndClickCancel(String errorMessage) {
        switchToActiveModalDialog();
        shouldContainText("Error message not matched", proofsOutstandingErrorMessage, errorMessage);
        clickModelButton("Cancel");
    }

    /**
     * runs the eligibility check
     */
    public void runEligibilityCheck() {
        logger.info("Run the eligibility checks");
        switchToTab("Eligibility Checks");
        clickLinkAndWaitForModalFrame("Check Eligibility", "Eligibility Checks");
        switchToActiveModalDialog();
        clickModelButton("Yes");
        checkForErrorMessages();
        waitForPageLoaded();
    }

    /**
     * clicks on the element and waits for the modal window to be launched
     *
     * @param cssSelector jquery/ css selector / Query selector of the element, it will work for all the combinations
     */
    public void clickAndWaitForModalFrame(String cssSelector, String frameToSwitch) {
        waitForCondition(() -> {
            switchToFrameByTitle(frameToSwitch);
            click(By.cssSelector(cssSelector));
            switchToDefaultFrame();
            return !findElements(By.cssSelector("iframe[title^='Modal Frame']")).isEmpty();
        }, "expected frame not displayed, clicked on  element:" + cssSelector);
    }

    /**
     * clicks on the anchor element that contains the passed text and waits for the Modal window to be launched
     *
     * @param textOnLink text present on the anchor element
     */
    public void clickLinkAndWaitForModalFrame(String textOnLink, String frameToSwitch) {
        logger.debug("click on the anchor tag element and wait for the modal window to launch, link button:" + textOnLink);
        clickAndWaitForModalFrame(format("a[title^=\"%1$s\"]", textOnLink), frameToSwitch);
    }

    /**
     * verifies the error message displayed on the page, Note: if it is frame make sure you're on the correct frame
     *
     * @param textOnErrorMessage expected error message, verify using contains
     */
    public void verifyErrorMessage(String textOnErrorMessage) {
        logger.debug("verify the error message displayed on the frame, expected error message:" + textOnErrorMessage);
        shouldContainText("Error message not matched: ", By.cssSelector("*[id $='error-messages']"), textOnErrorMessage);
    }

    public void waitForDataDisplay() {
        logger.debug("check for message please wait...");
        waitForConditionWithoutException(() -> !containsElements("div[title^='Please wait...']"), 120, "Page took longer to load");
    }

    public void goToLastPage() {
        if (containsElements("a[title='Last page']")) click(By.cssSelector("a[title=\"Last page\"]"));
    }
    /**
     * Use this method to click on any buttons appearing on Modal pages. Example: Edit/ADD Evidence modal pages
     */
    public void clickbutton(String Button) {
        switchToDefaultFrame();
        String xpath = "//div[@data-dojo-attach-point=\"modalFooter\" and starts-with(@id,\"curam_modal_CuramCarbonModal\")]//button[text()=\"" + Button + "\"]";
        click(By.xpath(xpath));
    }

    /**
     * @param by     element that you'd like to check the colour of
     * @param colour rgb colour you'd like to check is correct
     *               <p>
     *               Use this method to validate that correct colour is displayed by an element
     */
    public void elementShouldContainColour(By by, String colour) {
        waitForConditionWithoutException(() -> getAttribute(by, "style").contains(colour), 20, "");
        String actualValue = getAttribute(by, colour);
        Assertions.assertThat(actualValue).describedAs("element colour not matched" + " Actual: '%s', Expected: '%s'", actualValue, colour).contains(colour);
    }

    public void searchDocument(String option) {
        logger.info("Search for the document, using DocumentName:" +option);
        By FromDate = By.xpath("//input[@data-testid='date_Field.Label.FromDate']");
        By ToDate = By.xpath("//input[@data-testid='date_Field.Label.ToDate']");

        closeAllOpenTabs();
        selectOptionFromShortcutsMenu("Clients and Outcomes", "Documents", "Available Documents");
        switchToFrameFromDefault(SearchDocumentFrame);
        switch (option) {

            case "":
                enterValueInto("Reference", option);
            break;

            case "DocReferenceNumber":
                enterValueInto("Reference",sharedData.captureGroupId.get(0));
                break;

            case "Nino":
                try{
                    enterText(FromDate, DateHelper.returnFormattedDate(sharedData.contentReceiptDate, "yyyy-MM-dd", "dd/MM/yyyy"));
                    enterText(ToDate, DateHelper.getRelativeDatefromDate(DateHelper.returnFormattedDate(sharedData.contentReceiptDate, "yyyy-MM-dd", "dd/MM/yyyy"),0, 0,0, 6));
                } catch(ParseException e) {
                    logger.error("Parse Error :" + e);
                    logger.info("Defaulting to standard date range");
                    enterText(FromDate,getRelativeDate("-6").format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                    enterText(ToDate,getRelativeDate("0").format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                }
                enterValueInto("National Insurance Number",sharedData.nino);
                break;
            case "PersonalIdentifiers":
                try{
                    enterText(FromDate, DateHelper.returnFormattedDate(sharedData.contentReceiptDate, "yyyy-MM-dd", "dd/MM/yyyy"));
                    enterText(ToDate, DateHelper.getRelativeDatefromDate(DateHelper.returnFormattedDate(sharedData.contentReceiptDate, "yyyy-MM-dd", "dd/MM/yyyy"),0, 0,0, 6));
                } catch(ParseException e) {
                    logger.error("Parse Error :" + e);
                    logger.info("Defaulting to standard date range");
                    enterText(FromDate,getRelativeDate("-6").format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                    enterText(ToDate,getRelativeDate("0").format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                }
                enterValueInto("First Name", sharedData.firstName);
                enterValueInto("Post Code",sharedData.postcode);
                break;
            case "Names":
                try{
                    enterText(FromDate, DateHelper.returnFormattedDate(sharedData.contentReceiptDate, "yyyy-MM-dd", "dd/MM/yyyy"));
                    enterText(ToDate, DateHelper.getRelativeDatefromDate(DateHelper.returnFormattedDate(sharedData.contentReceiptDate, "yyyy-MM-dd", "dd/MM/yyyy"),0, 0,0, 6));
                } catch(ParseException e) {
                    logger.error("Parse Error :" + e);
                    logger.info("Defaulting to standard date range");
                    enterText(FromDate,getRelativeDate("-6").format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                    enterText(ToDate,getRelativeDate("0").format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                }
                enterValueInto("First Name", sharedData.firstName.substring(0,3));
                enterValueInto("Last Name",sharedData.lastName.substring(sharedData.lastName.length() -3));
        }

        click(personSearchButton);
    }

    public void verifyDocumentDetails() throws Exception{
        String dob;
        dob = DateHelper.returnFormattedDate(sharedData.clientDateofbirth.toString(), "yyyy-MM-dd", "dd/MM/yyyy");
        switchToFrameFromDefault(SearchDocumentFrame);
        shouldContainRecordRow(getSharedData().nino, sharedData.firstName + " " + sharedData.lastName,dob,"Un Resolved");

    }
    public void verifyDocumentDetails(String staus) throws Exception{
        switchToFrameFromDefault(SearchDocumentFrame);
        shouldContainRecordRow(getSharedData().nino, sharedData.firstName + " " + sharedData.lastName,sharedData.dob,staus);

    }

    public void EmptyDocSearchErrorMessage(List<Map<String, String>> errorMessages) {
        switchToframeByContentPanelTitle("Content Panel - Document List (messages present)");
        if (containsElements("#ieg-error-messages,#error-messages")) {
            for (Map<String, String> message : errorMessages) {
                List<String> extractedTextList = getTextOfAllElements("ul[id='error-messages'] div +div");
                String item = message.get("error message");
                Assert.assertTrue(item + " is NOT in outstanding items to verify", extractedTextList.toString().contains(item));
            }
        }

    }

    public String pageTitle(){
        String nameOfPage;
        waitForPageLoaded();
        return getDriver().getTitle();

    }
    public void clickSaveNextButton() {
        logger.info("switch to default frame and click on save button");
        clickModelButton("Save & Next");
        clickModelButton("Finish");
    }

    /** A method to check that a table has the correct headers.
     *
     * @param expectedMultiText a list of header names to test
     * @return current page object instance for chaining method calls
     */
    public SPMBasePage tableShouldContainHeaders(String... expectedMultiText) {
        String recordToMatch = format("$('%s')", getFormattedHeaderMatchingQuery(expectedMultiText));
        assertThat("Headers not matched in the table with the matching text query " + recordToMatch, containsElements(recordToMatch));
        return this;
    }

    /**
     * verifies that field value should be equals to ignoring case expected value
     *
     * @param fieldLabel    field name, it can be a start of the label or end of the label or can be of full label
     * @param expectedValue expected value in the field
     */
    public void labelValueShouldBeEqualToIgnoringCase(String fieldLabel, String expectedValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedValue);
        By fieldValue = By.xpath(String.format("//label[contains(text(),\"%1$s\")]/../div", fieldLabel));
        shouldBeEqualToIgnoringCase(fieldLabel + " field value not matched", fieldValue, expectedValue);
    }

    @NotNull
    public String getFormattedHeaderMatchingQuery(String... expectedMultiText) {
        StringBuilder recordToMatch = new StringBuilder("th[class*=\"field\"]");
        for (String expectedText : expectedMultiText) {
            if (isNotNullOrEmpty(expectedText)) {
                recordToMatch.append(format(":contains(\"%s\")", expectedText));
            }
        }
        return recordToMatch.toString();
    }

    public void labelValueShouldBe(String fieldLabel, String expectedValue) {
        logger.debug("verify the field value , field label:" + fieldLabel + " expected value:" + expectedValue);
        By fieldValue = By.xpath(String.format("//label[contains(text(),\"%1$s\")]/../div", fieldLabel));
        shouldBeEqualToText(fieldLabel + " field value not matched", fieldValue, expectedValue);
    }

}


